import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler
from dotenv import load_dotenv
import os
from aiBrain import generate_reply_from_start

# Load environment variables
load_dotenv()

# Set up logging
logging.basicConfig(level=logging.INFO)

# Your API keys from environment variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

USER_LANGUAGES = {}
LANGUAGES = {
    "en": "English",
    "de": "German",
    "fr": "French",
    "es": "Spanish",
    "ru": "Russian"
}

# Translations for /start and /help
translations = {
    "start": {
        "en": "üéâ Welcome! You are speaking in {0}. Which language would you like to learn?",
        "de": "üéâ Willkommen! Du sprichst {0}. Welche Sprache m√∂chtest du lernen?",
        "fr": "üéâ Bienvenue! Vous parlez {0}. Quelle langue souhaitez-vous apprendre?",
        "es": "üéâ ¬°Bienvenido! Est√°s hablando en {0}. ¬øQu√© idioma te gustar√≠a aprender?",
        "ru": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –≥–æ–≤–æ—Ä–∏—Ç–µ –Ω–∞ {0}. –ö–∞–∫–æ–π —è–∑—ã–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å?"
    },
    "help": {
        "en": "üìù Help: /start to start. /help to get help.",
        "de": "üìù Hilfe: /start um zu starten. /help f√ºr Hilfe.",
        "fr": "üìù Aide: /start pour commencer. /help pour obtenir de l'aide.",
        "es": "üìù Ayuda: /start para comenzar. /help para obtener ayuda.",
        "ru": "üìù –ü–æ–º–æ—â—å: /start –¥–ª—è –Ω–∞—á–∞–ª–∞. /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    }
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_language_code = update.message.from_user.language_code

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ Telegram –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    user_language = LANGUAGES.get(user_language_code, 'en')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_LANGUAGES[user_id] = {"native": user_language, "learning": None}

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    start_message = translations["start"].get(user_language, translations["start"]["en"])

    language_buttons = [[language for language in LANGUAGES.values()]]
    reply_markup = ReplyKeyboardMarkup(language_buttons, one_time_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        start_message.format(LANGUAGES.get(user_language, 'your native language')),
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_language = USER_LANGUAGES.get(user_id, {}).get("native", "en")

    # Get the translated help message for the user's language
    help_message = translations["help"].get(user_language, translations["help"]["en"])

    await update.message.reply_text(help_message)


async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    selected_language = update.message.text.lower()

    # –í LANGUAGES –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–æ –∫–æ–¥—É, –∞ –Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    selected_language_code = None
    for code, name in LANGUAGES.items():
        if name.lower() == selected_language:
            selected_language_code = code
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–æ–ø—É—Å—Ç–∏–º
    if selected_language_code:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_LANGUAGES[user_id]["learning"] = selected_language_code

        # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞
        valid_levels = ["A1", "A2", "B1", "B2", "C1", "C2"]
        language_level_buttons = [
            [level] for level in valid_levels  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        ]
        reply_markup = ReplyKeyboardMarkup(language_level_buttons, one_time_keyboard=True)

        await update.message.reply_text(
            f"Great choice! You've selected {LANGUAGES[selected_language_code]}. "
            "Now, please tell me your language level (e.g., A1, B2, etc.).",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "Sorry, I don't support that language. Please choose a valid language from the list."
        )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞
async def handle_language_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    selected_level = update.message.text.upper()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not selected_level:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω
        await update.message.reply_text(
            "Please select a language level from the available options (A1, A2, B1, B2, C1, C2)."
        )
        return

    valid_levels = ["A1", "A2", "B1", "B2", "C1", "C2"]

    if selected_level in valid_levels:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞
        USER_LANGUAGES[user_id]["language_level"] = selected_level

        await update.message.reply_text(
            f"Got it! Your level in {LANGUAGES[USER_LANGUAGES[user_id]['learning']]} is set to {selected_level}. "
            "We can now start the conversation in your learning language. Feel free to ask anything!"
        )

        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        await generate_conversation(update, context)
    else:
        await update.message.reply_text(
            "Please choose a valid level (A1, A2, B1, B2, C1, C2)."
        )

async def generate_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_language = USER_LANGUAGES[user_id]["learning"]
    language_level = USER_LANGUAGES[user_id]["language_level"]

    # Call the function from aiBrains to generate the first message based on the selected language and level
    gpt_reply = await generate_reply_from_start(user_language, language_level)

    # Send the generated reply to the user
    await update.message.reply_text(gpt_reply)


# --- App ---
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))  # Start command
    app.add_handler(CommandHandler("help", help_command))  # Help command
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language_selection))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language_level))

    app.run_polling()
